{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth'; // Web app's Firebase configuration\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDgq5-3ahQB5XTgHKXdkQq5wSSqby2_16c\",\n  authDomain: \"my-fake-ecommerce.firebaseapp.com\",\n  databaseURL: \"https://my-fake-ecommerce.firebaseio.com\",\n  projectId: \"my-fake-ecommerce\",\n  storageBucket: \"my-fake-ecommerce.appspot.com\",\n  messagingSenderId: \"1038620962488\",\n  appId: \"1:1038620962488:web:d627fbb679c78853d84e4d\",\n  measurementId: \"G-P0TW8K9C4D\"\n}; // Initialize Firebase\n\nfirebase.initializeApp(firebaseConfig); // Take userAuth obj and store inside firebase database\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    // Create new doc object if user doesn't exist\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('Error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const getUserCartRef = async userId => {\n  const cartsRef = firestore.collection('carts').where('userId', '==', userId);\n  const onSnapshot = await cartsRef.get();\n\n  if (onSnapshot.empty) {\n    const cattDocRef = firestore.collection('carts').doc();\n    await cattDocRef.set({\n      userId,\n      cartItems: []\n    });\n  }\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); // Access to goggle auth from authentication library\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["/Users/Tinashe/development/react-js/my-fake-ecommerce-app/client/src/firebase/firebase.utils.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","getUserCartRef","userId","cartsRef","collection","where","onSnapshot","empty","cattDocRef","cartItems","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport 'firebase/auth'\n\n// Web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDgq5-3ahQB5XTgHKXdkQq5wSSqby2_16c\",\n  authDomain: \"my-fake-ecommerce.firebaseapp.com\",\n  databaseURL: \"https://my-fake-ecommerce.firebaseio.com\",\n  projectId: \"my-fake-ecommerce\",\n  storageBucket: \"my-fake-ecommerce.appspot.com\",\n  messagingSenderId: \"1038620962488\",\n  appId: \"1:1038620962488:web:d627fbb679c78853d84e4d\",\n  measurementId: \"G-P0TW8K9C4D\"\n}\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig)\n\n// Take userAuth obj and store inside firebase database\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`)\n\n  const snapShot = await userRef.get()\n\n  if (!snapShot.exists) {\n    // Create new doc object if user doesn't exist\n    const { displayName, email } = userAuth\n    const createdAt = new Date()\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      })\n    } catch (error) {\n      console.log('Error creating user', error.message)\n    }\n  }\n  return userRef\n}\n\nexport const getUserCartRef = async userId => {\n  const cartsRef = firestore.collection('carts').where('userId', '==', userId)\n  const onSnapshot = await cartsRef.get()\n\n  if (onSnapshot.empty){\n    const cattDocRef = firestore.collection('carts').doc()\n    await cattDocRef.set({ userId, cartItems: [] })\n  }\n}\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey)\n  const batch = firestore.batch()\n\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc()\n    batch.set(newDocRef, obj)\n  })\n\n  return await batch.commit()\n}\n\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const { title, items } = doc.data()\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    }\n  })\n\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection\n    return accumulator\n  }, {})\n}\n\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe()\n      resolve(userAuth)\n    }, reject)\n  })\n}\n\nexport const auth = firebase.auth()\nexport const firestore = firebase.firestore()\n\n// Access to goggle auth from authentication library\nexport const googleProvider = new firebase.auth.GoogleAuthProvider()\n\ngoogleProvider.setCustomParameters({ prompt: 'select_account'})\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider)\n\nexport default firebase"]},"metadata":{},"sourceType":"module"}