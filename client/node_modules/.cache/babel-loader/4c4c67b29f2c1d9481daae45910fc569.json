{"ast":null,"code":"import { takeLatest, put, call, all } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure } from './user.actions';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils'; // Reusable generator function\n\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n  console.log(userAuth);\n\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} // Sign in with google gen function\n\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} // Sign in with email and password gen function\n\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} // Is the user authenticated gen function\n\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} // Sign out generator function\n\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* signUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\nexport function* signInAfterSignUp({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  yield getSnapshotFromUserAuth(user, additionalData);\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\nexport function* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpStart), call(onSignUpSuccess)]);\n}","map":{"version":3,"sources":["/Users/Tinashe/development/react-js/my-fake-ecommerce-app/client/src/redux/user/user.sagas.js"],"names":["takeLatest","put","call","all","UserActionTypes","signInSuccess","signInFailure","signOutSuccess","signOutFailure","signUpSuccess","signUpFailure","auth","googleProvider","createUserProfileDocument","getCurrentUser","getSnapshotFromUserAuth","userAuth","additionalData","console","log","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","signOut","signUp","displayName","createUserWithEmailAndPassword","signInAfterSignUp","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","onSignUpStart","SIGN_UP_START","onSignUpSuccess","SIGN_UP_SUCCESS","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, call, all } from 'redux-saga/effects'\n\nimport UserActionTypes from './user.types'\n\nimport {\n  signInSuccess,\n  signInFailure,\n  signOutSuccess,\n  signOutFailure,\n  signUpSuccess,\n  signUpFailure\n} from './user.actions'\n\nimport { \n  auth, \n  googleProvider, \n  createUserProfileDocument,\n  getCurrentUser,\n} from '../../firebase/firebase.utils'\n\n// Reusable generator function\nexport function* getSnapshotFromUserAuth(userAuth, additionalData){\n  console.log(userAuth)\n\n  try {\n    const userRef = yield call(\n      createUserProfileDocument, \n      userAuth, \n      additionalData\n    )\n    const userSnapshot = yield userRef.get()\n\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }))\n  } catch(error){\n    yield put(signInFailure(error))\n  }\n}\n\n// Sign in with google gen function\nexport function* signInWithGoogle(){\n  try {\n    const { user } = yield auth.signInWithPopup(googleProvider)\n    yield getSnapshotFromUserAuth(user)\n  } catch(error){\n    yield put(signInFailure(error))\n  }\n}\n\n// Sign in with email and password gen function\nexport function* signInWithEmail({ payload: { email, password}}){\n  try {\n    const { user } = yield auth.signInWithEmailAndPassword(email, password)\n    yield getSnapshotFromUserAuth(user)\n  } catch(error){\n    yield put(signInFailure(error))\n  }\n}\n\n// Is the user authenticated gen function\nexport function* isUserAuthenticated(){\n  try {\n    const userAuth = yield getCurrentUser()\n\n    if(!userAuth) return\n    yield getSnapshotFromUserAuth(userAuth)\n  } catch(error) {\n    yield put(signInFailure(error))\n  }\n}\n\n// Sign out generator function\nexport function* signOut(){\n  try {\n    yield auth.signOut()\n    yield put(signOutSuccess())\n  } catch(error){\n    yield put(signOutFailure(error))\n  }\n}\n\nexport function* signUp({ payload: { email, password, displayName } }) {\n  try {\n    const { user } = yield auth.createUserWithEmailAndPassword(\n      email, \n      password\n    )\n    yield put(signUpSuccess({ user, additionalData: { displayName } }))\n  } catch (error) {\n    yield put(signUpFailure(error))\n  }\n}\n\nexport function* signInAfterSignUp({ payload: { user, additionalData } }) {\n  yield getSnapshotFromUserAuth(user, additionalData);\n}\n\nexport function* onGoogleSignInStart(){\n  yield takeLatest(\n    UserActionTypes.GOOGLE_SIGN_IN_START, \n    signInWithGoogle\n  )\n}\n\nexport function* onEmailSignInStart(){\n  yield takeLatest(\n    UserActionTypes.EMAIL_SIGN_IN_START,\n    signInWithEmail\n  )\n}\n\nexport function* onCheckUserSession(){\n  yield takeLatest(\n    UserActionTypes.CHECK_USER_SESSION,\n    isUserAuthenticated\n  )\n}\n\nexport function* onSignOutStart(){\n  yield takeLatest(\n    UserActionTypes.SIGN_OUT_START,\n    signOut\n  )\n}\n\nexport function* onSignUpStart(){\n  yield takeLatest(\n    UserActionTypes.SIGN_UP_START, \n    signUp\n  )\n}\n\nexport function* onSignUpSuccess(){\n  yield takeLatest(\n    UserActionTypes.SIGN_UP_SUCCESS, \n    signInAfterSignUp\n  )\n}\n\nexport function* userSagas(){\n  yield all([\n    call(onGoogleSignInStart),\n    call(onEmailSignInStart),\n    call(onCheckUserSession),\n    call(onSignOutStart),\n    call(onSignUpStart),\n    call(onSignUpSuccess)\n  ])\n}"]},"metadata":{},"sourceType":"module"}