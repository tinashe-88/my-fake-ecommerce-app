{"ast":null,"code":"import { takeLatest, call, all, put, select } from 'redux-saga/effects';\nimport { getUserCartRef } from '../../firebase/firebase.utils';\nimport { selectCurrentUser } from '../user/user.selector';\nimport UserActionTypes from '../user/user.types';\nimport CartActionTypes from '../cart/cart.types';\nimport { selectCartItems } from './cart.selectors';\nimport { clearCart, setCartFromFirebase } from './cart.actions';\nexport function* clearCartOnSignOut() {\n  yield put(clearCart());\n}\nexport function* updateCartInFirebase() {\n  const currentUser = yield select(selectCurrentUser);\n\n  if (currentUser) {\n    try {\n      const cartRef = yield getUserCartRef(currentUser.id);\n      const cartItems = yield select(selectCartItems);\n      yield cartRef.update({\n        cartItems\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}\nexport function* checkCartFromFirebase({\n  payload: user\n}) {\n  const cartRef = yield getUserCartRef(user.id);\n  const cartSnapshot = yield cartRef.get();\n  yield put(setCartFromFirebase(cartSnapshot.data().cartItems));\n}\nexport function* onSignOutSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut);\n}\nexport function* onUserSignIn() {\n  yield takeLatest(UserActionTypes.SIGN_IN_SUCCESS, checkCartFromFirebase);\n}\nexport function* onCartChange() {\n  yield takeLatest([CartActionTypes.ADD_ITEM, CartActionTypes.REMOVE_ITEM, CartActionTypes.CLEAR_ITEM_FROM_CART], updateCartInFirebase);\n}\nexport function* cartSagas() {\n  yield all([call(onSignOutSuccess)], [call(onUserSignIn)], [call(onCartChange)]);\n}","map":{"version":3,"sources":["/Users/Tinashe/development/react-js/my-fake-ecommerce-app/client/src/redux/cart/cart.sagas.js"],"names":["takeLatest","call","all","put","select","getUserCartRef","selectCurrentUser","UserActionTypes","CartActionTypes","selectCartItems","clearCart","setCartFromFirebase","clearCartOnSignOut","updateCartInFirebase","currentUser","cartRef","id","cartItems","update","error","console","log","checkCartFromFirebase","payload","user","cartSnapshot","get","data","onSignOutSuccess","SIGN_OUT_SUCCESS","onUserSignIn","SIGN_IN_SUCCESS","onCartChange","ADD_ITEM","REMOVE_ITEM","CLEAR_ITEM_FROM_CART","cartSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,EAAqCC,MAArC,QAAmD,oBAAnD;AAEA,SAASC,cAAT,QAA+B,+BAA/B;AAEA,SAASC,iBAAT,QAAkC,uBAAlC;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,SAASC,eAAT,QAAgC,kBAAhC;AACA,SAASC,SAAT,EAAoBC,mBAApB,QAA+C,gBAA/C;AAGA,OAAO,UAAUC,kBAAV,GAA8B;AACnC,QAAMT,GAAG,CAACO,SAAS,EAAV,CAAT;AACD;AAED,OAAO,UAAUG,oBAAV,GAAgC;AACrC,QAAMC,WAAW,GAAG,MAAMV,MAAM,CAACE,iBAAD,CAAhC;;AAEA,MAAGQ,WAAH,EAAe;AACb,QAAI;AACF,YAAMC,OAAO,GAAG,MAAMV,cAAc,CAACS,WAAW,CAACE,EAAb,CAApC;AACA,YAAMC,SAAS,GAAG,MAAMb,MAAM,CAACK,eAAD,CAA9B;AACA,YAAMM,OAAO,CAACG,MAAR,CAAe;AAAED,QAAAA;AAAF,OAAf,CAAN;AACD,KAJD,CAIE,OAAME,KAAN,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;AACF;AAED,OAAO,UAAUG,qBAAV,CAAgC;AAAEC,EAAAA,OAAO,EAAEC;AAAX,CAAhC,EAAiD;AACtD,QAAMT,OAAO,GAAG,MAAMV,cAAc,CAACmB,IAAI,CAACR,EAAN,CAApC;AACA,QAAMS,YAAY,GAAG,MAAMV,OAAO,CAACW,GAAR,EAA3B;AACA,QAAMvB,GAAG,CAACQ,mBAAmB,CAACc,YAAY,CAACE,IAAb,GAAoBV,SAArB,CAApB,CAAT;AAED;AAED,OAAO,UAAUW,gBAAV,GAA4B;AACjC,QAAM5B,UAAU,CACdO,eAAe,CAACsB,gBADF,EAEdjB,kBAFc,CAAhB;AAID;AAED,OAAO,UAAUkB,YAAV,GAAwB;AAC7B,QAAM9B,UAAU,CACdO,eAAe,CAACwB,eADF,EAEdT,qBAFc,CAAhB;AAID;AAED,OAAO,UAAUU,YAAV,GAAwB;AAC7B,QAAMhC,UAAU,CAAC,CACfQ,eAAe,CAACyB,QADD,EAEfzB,eAAe,CAAC0B,WAFD,EAGf1B,eAAe,CAAC2B,oBAHD,CAAD,EAIbtB,oBAJa,CAAhB;AAKD;AAED,OAAO,UAAUuB,SAAV,GAAqB;AAC1B,QAAMlC,GAAG,CACP,CAACD,IAAI,CAAC2B,gBAAD,CAAL,CADO,EAEP,CAAC3B,IAAI,CAAC6B,YAAD,CAAL,CAFO,EAGP,CAAC7B,IAAI,CAAC+B,YAAD,CAAL,CAHO,CAAT;AAKD","sourcesContent":["import { takeLatest, call, all, put, select } from 'redux-saga/effects'\n\nimport { getUserCartRef } from '../../firebase/firebase.utils'\n\nimport { selectCurrentUser } from '../user/user.selector'\nimport UserActionTypes from '../user/user.types'\nimport CartActionTypes from '../cart/cart.types'\nimport { selectCartItems } from './cart.selectors'\nimport { clearCart, setCartFromFirebase } from './cart.actions'\n\n\nexport function* clearCartOnSignOut(){\n  yield put(clearCart())\n}\n\nexport function* updateCartInFirebase(){\n  const currentUser = yield select(selectCurrentUser)\n\n  if(currentUser){\n    try {\n      const cartRef = yield getUserCartRef(currentUser.id)\n      const cartItems = yield select(selectCartItems)\n      yield cartRef.update({ cartItems })\n    } catch(error){\n      console.log(error)\n    }\n  }\n}\n\nexport function* checkCartFromFirebase({ payload: user}){\n  const cartRef = yield getUserCartRef(user.id)\n  const cartSnapshot = yield cartRef.get()\n  yield put(setCartFromFirebase(cartSnapshot.data().cartItems))\n\n}\n\nexport function* onSignOutSuccess(){\n  yield takeLatest(\n    UserActionTypes.SIGN_OUT_SUCCESS,\n    clearCartOnSignOut\n  )\n}\n\nexport function* onUserSignIn(){\n  yield takeLatest(\n    UserActionTypes.SIGN_IN_SUCCESS,\n    checkCartFromFirebase\n  )\n}\n\nexport function* onCartChange(){\n  yield takeLatest([\n    CartActionTypes.ADD_ITEM,\n    CartActionTypes.REMOVE_ITEM,\n    CartActionTypes.CLEAR_ITEM_FROM_CART,\n  ], updateCartInFirebase)\n}\n\nexport function* cartSagas(){\n  yield all(\n    [call(onSignOutSuccess)],\n    [call(onUserSignIn)],\n    [call(onCartChange)],\n  )\n}"]},"metadata":{},"sourceType":"module"}